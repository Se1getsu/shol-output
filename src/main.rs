// Generated by Shol compiler.
// DO NOT EDIT MANUALLY.
//
// Original source: example/fizzbuzz.shol
// Shol version: 0.1.0

#![allow(
  non_snake_case,
  non_camel_case_types,
  dead_code,
  unused_variables,
  unused_imports,
  unused_mut,
  unreachable_patterns,
  unused_parens,
  unused_assignments,
)]
use std::collections::HashMap;

#[derive(Eq,Debug,PartialEq,Clone)]
enum ValueType {
  Int(i32),
  String(String),
  Bool(bool),
}
#[derive(Eq,Debug,PartialEq,Clone)]
enum ResourceType {
  Value(ValueType),
  Tuple(Vec<ResourceType>)
}
trait Colony {
  fn debug_print(&mut self);
  fn receive(&mut self, g: Vec<ValueType>);
  fn rule(&mut self) -> HashMap<usize, Vec<ValueType>>;
}

struct Colony_nGen {
  resources: Vec<ValueType>,
}
impl Colony for Colony_nGen {
  fn debug_print(&mut self) { println!("{:?}", self.resources); }
  fn receive(&mut self, g: Vec<ValueType>) { self.resources.extend(g); }
  fn rule(&mut self) -> HashMap<usize, Vec<ValueType>> {
    let mut gifts: HashMap<usize, Vec<ValueType>> = HashMap::new();
    let mut buf = Vec::new();
    for (i, resource) in self.resources.iter().enumerate() {
      let mut no_match = true;
      match resource {
        ValueType::Bool(v) => {
          {
            let entry = gifts.entry(1).or_default();
            entry.push(ValueType::Bool(v.clone()));
            no_match = false;
          }
        }
        ValueType::Int(v) => {
          if (v.clone()<100) {
            buf.push(ValueType::Int((v.clone()+1)));
            no_match = false;
          }
          {
            let entry = gifts.entry(1).or_default();
            entry.push(ValueType::Int(v.clone()));
            no_match = false;
          }
        }
        ValueType::String(v) => {
          {
            let entry = gifts.entry(1).or_default();
            entry.push(ValueType::String(v.clone()));
            no_match = false;
          }
        }
      }
      if no_match {
        buf.push(resource.clone());
      }
    }
    self.resources = buf;
    gifts
  }
}

struct Colony_fizzBuzz {
  resources: Vec<ValueType>,
}
impl Colony for Colony_fizzBuzz {
  fn debug_print(&mut self) { println!("{:?}", self.resources); }
  fn receive(&mut self, g: Vec<ValueType>) { self.resources.extend(g); }
  fn rule(&mut self) -> HashMap<usize, Vec<ValueType>> {
    let mut gifts: HashMap<usize, Vec<ValueType>> = HashMap::new();
    let mut buf = Vec::new();
    for (i, resource) in self.resources.iter().enumerate() {
      let mut no_match = true;
      match resource {
        ValueType::String(v) => {
        }
        ValueType::Int(v) => {
          if ((v.clone()%3)==0) {
            buf.push(ValueType::String("Fizz".to_owned()));
            no_match = false;
          }
          if ((v.clone()%5)==0) {
            buf.push(ValueType::String("Buzz".to_owned()));
            no_match = false;
          }
        }
        ValueType::Bool(v) => {
        }
      }
      if no_match {
        buf.push(resource.clone());
      }
    }
    self.resources = buf;
    let mut insertions: HashMap<usize, Vec<ValueType>> = HashMap::new();
    let mut some_used: Vec<bool> = vec![false; self.resources.len()];
    let mut used: Vec<bool> = vec![false; self.resources.len()];
    let mut capt_prog: Vec<usize> = vec![0;2];
    let mut capt_idx: usize = 0;
    while capt_prog[capt_idx] < self.resources.len() {
      if used[capt_prog[capt_idx]] {
        capt_prog[capt_idx] += 1;
        continue;
      }
      match capt_idx {
        0 => {
          if match &self.resources[capt_prog[0]] {
            ValueType::String(v) => v.clone() == "Fizz".to_owned(),
            _ => false
          } {
            capt_idx = 1;
            used[capt_prog[0]] = true;
            some_used[capt_prog[0]] = true;
          }
          capt_prog[0] += 1;
        },
        1 => {
          if match &self.resources[capt_prog[1]] {
            ValueType::String(v) => v.clone() == "Buzz".to_owned(),
            _ => false
          } {
            capt_idx = 0;
            used[capt_prog[1]] = true;
            some_used[capt_prog[1]] = true;
            capt_prog[1] += 1;
            let entry = insertions.entry(capt_prog[0]-1).or_default();
            entry.push(ValueType::String("FizzBuzz".to_owned()));
          } else {
            capt_prog[1] += 1;
          }
        },
        _ => unreachable!()
      }
    }
    for i in 0..capt_idx {
      used[capt_prog[i]-1] = false;
      some_used[capt_prog[i]-1] = false;
    }
    let mut buf = Vec::new();
    for (i, resource) in self.resources.iter().enumerate() {
      let mut no_match = true;
      no_match &= !some_used[i];
      if let Some(insertion) = insertions.get(&i) {
        buf.extend(insertion.clone());
      }
      if no_match {
        buf.push(resource.clone());
      }
    }
    self.resources = buf;
    let mut buf = Vec::new();
    for (i, resource) in self.resources.iter().enumerate() {
      let mut no_match = true;
      match resource {
        ValueType::Bool(v) => {
          {
            let entry = gifts.entry(2).or_default();
            entry.push(ValueType::Bool(v.clone()));
            no_match = false;
          }
        }
        ValueType::Int(v) => {
          {
            let entry = gifts.entry(2).or_default();
            entry.push(ValueType::Int(v.clone()));
            no_match = false;
          }
        }
        ValueType::String(v) => {
          {
            let entry = gifts.entry(2).or_default();
            entry.push(ValueType::String(v.clone()));
            no_match = false;
          }
        }
      }
      if no_match {
        buf.push(resource.clone());
      }
    }
    self.resources = buf;
    gifts
  }
}

struct Colony_print {
  resources: Vec<ValueType>,
}
impl Colony for Colony_print {
  fn debug_print(&mut self) { println!("{:?}", self.resources); }
  fn receive(&mut self, g: Vec<ValueType>) { self.resources.extend(g); }
  fn rule(&mut self) -> HashMap<usize, Vec<ValueType>> {
    let mut gifts: HashMap<usize, Vec<ValueType>> = HashMap::new();
    for resource in &self.resources {
      match resource {
        ValueType::String(v) => println!("{v}"),
        ValueType::Bool(v) => println!("{v}"),
        ValueType::Int(v) => println!("{v}"),
      }
    }
    self.resources = vec![];
    gifts
  }
}

fn main() {
  let mut colonies: Vec<Box<dyn Colony>> = Vec::new();
  colonies.push(Box::new(Colony_nGen {
    resources: vec![
      ValueType::Int(1),
    ],
  }));
  colonies.push(Box::new(Colony_fizzBuzz {
    resources: vec![
    ],
  }));
  colonies.push(Box::new(Colony_print {
    resources: vec![
    ],
  }));
  for _ in 0..8 {
    for i in 0..colonies.len() {
    // for debugging
    // println!(""); for i in 0..colonies.len() { colonies[i].debug_print(); }
      for (d, gv) in colonies[i].rule() {
        colonies[d].receive(gv);
      }
    }
  }
}
